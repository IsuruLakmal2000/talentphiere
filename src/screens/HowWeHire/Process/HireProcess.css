/* ProcessCards.css */

/* --- General Section Styling --- */
.process-cards-section {
  padding: 50px 20px;
  background-color: #f0f8ff; /* Light background */
  height: 2000px; /* Ensure enough height for scrolling effect */
}

h1 {
  text-align: center;
  margin-bottom: 5px;
}

p {
  text-align: center;
  margin-bottom: 40px;
}

/* --- Sticky Container --- */
/* This container is important for defining the scroll space where the effect happens. */
.sticky-container {
  /* Calculate the total required height for the stacking to complete */
  /* (Number of cards * Card Height) - (Height of the final view) */
  /* Example: 4 cards * 450px = 1800px. This should be adjusted based on your card design. */
  height: 1800px; /* Needs to be large enough to allow the effect to complete */
  position: relative; /* All sticky children are relative to this parent */
  max-width: 800px;
  margin: 0 auto;
}

/* --- Individual Sticky Wrapper --- */
/* This is the element that becomes 'sticky' */
.sticky-card-wrapper {
  position: sticky;
  /* Setting the top: 0 here is key. All cards try to stick to the top of the viewport. */
  top: 0;
  height: 350px; /* Set a fixed height for better calculation in JS */
  padding: 50px 0; /* Add some vertical spacing */
  pointer-events: none; /* Allows scrolling/clicking "through" the stacked wrappers */
}
/* Only the last card wrapper needs pointer events to be clickable/readable in the final state */
.sticky-card-wrapper:last-child {
  pointer-events: auto;
}


/* --- Card Wrapper for Transformation --- */
/* This wrapper is for the translateY animation */
.card-wrapper {
  /* Full height of the sticky parent */
  height: 100%;
  width: 100%;
  transition: transform 0.5s ease-in-out; /* The animation */
  /* The z-index stacking is crucial: lower index cards must be visually *behind* higher index cards */
  /* We use the data-id attribute to ensure the later cards (higher ID) are on top */
  z-index: calc(900 - var(--data-id)); /* Note: This requires a custom property or direct inline style in TSX */
  /* For this simple CSS, we will rely on the order in the DOM: later cards are rendered later, so they are on top */
  position: relative;
  pointer-events: auto; /* Ensure the card content is interactive */
}

/* --- Process Card Styling (The actual content) --- */
.process-card {
  height: 100%;
  padding: 30px;
  border-radius: 12px;
  background-color: white;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid #ddd;
}

/* --- Header & Features Styling --- */
.icon-header {
  display: flex;
  margin-bottom: 15px;
}

.gear-icon {
  font-size: 24px;
  margin-right: 5px;
  color: #007bff; /* A blue color for the gears */
}

.process-card h2 {
  font-size: 24px;
  color: #333;
  margin-top: 0;
}

.process-card p {
  font-size: 16px;
  color: #555;
  margin-bottom: 25px;
  text-align: left;
}

.features {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}

.feature {
  display: flex;
  align-items: center;
  font-size: 14px;
  color: #007bff;
}

.feature-icon {
  margin-right: 5px;
}

/* --- Spacer for Scrollable Area --- */
.scroll-spacer {
  height: 100vh; /* Ensures there is space below the effect area to scroll back up */
}